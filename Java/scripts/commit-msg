#!/usr/bin/python3

import sys
import re
import subprocess

PROJECT_IDS = ['ONCHT', 'MMI']
BRANCH_TYPES = ['feat', 'fix', 'docs', 'style', 'refactor', 'test', 'chore']

REGEX_PROJECT_IDS = '|'.join(PROJECT_IDS)
REGEX_BRANCH_TYPES = '|'.join(BRANCH_TYPES)

# Should contain a capturing group to extract the reference:
REGEX_BRANCH = '^((?:{})-[\d]{{1,5}})(?:{})*$'.format(REGEX_PROJECT_IDS, REGEX_BRANCH_TYPES)

# Should contain a capturing group to extract the reference (note the dot at the end
REGEX_JIRA_ID = '^((?:{})-[\d]{{1,5}}) .+\.?$'.format(REGEX_PROJECT_IDS)

REGEX_BRANCH_CHECK = '^(?:{}) .+\.?$'.format(REGEX_BRANCH_TYPES)

# No capturing group. Just checking for the bare minimum:
REGEX_BASIC_MESSAGE = '^.+$'

# These branch names are not validated with this same rules (permissions should be configured
# on the server if you want to prevent pushing to any of these):
BRANCH_EXCEPTIONS = ['development', 'develop', 'loadtest', 'master', 'production']


def getBranchName():
  return subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD']).decode('ascii').strip()

def getBranchRef(branch):
    match = re.findall(REGEX_BRANCH, branch)
    return match[0] if match and match[0] else None

def jiraIdCheck(message):
    match = re.findall(REGEX_JIRA_ID, message)
    
    return match[0] if match and match[0] else None

def branchTypeCheck(message):
    message_array = message.split(' ')
    branchType = message_array[1][:-1]
    if not branchType in BRANCH_TYPES:
        print("Wrong branch type : {}, it should be {}".format(message_array[1], BRANCH_TYPES))
        return False
    return True

def isCommitValid(message):
    isValid = True
    messageOverride = None
    branch = getBranchName()
    isException = branch in BRANCH_EXCEPTIONS
    
    if isException:
        print('\nWARNING: You might not have permissions to push to `{}`.'.format(branch))

        if not message.startswith('HOT: '):
            print('\n         Also, you might consider prefixing the commit message with `HOT:`')

        print('\n         Use `git reset HEAD~` to undo this commit, create a proper branch and/or commit message and commit the changes again.')
        print('')

        return True

    branchRef = getBranchRef(branch)
    jiraIdReg = jiraIdCheck(message)
    

    if not re.match(REGEX_BRANCH, branch):
        isValid = False
        print('\nERROR: Invalid branch name:')
        print('\n       It should match {}'.format(REGEX_BRANCH))
        print('\n       Example: {}/{}-42-whatever-this-is'.format(
            PROJECT_IDS[0],
            BRANCH_TYPES[0]       
        ))

    isValid = branchTypeCheck(message)

    if not messageOverride and isValid and branchRef != jiraIdReg:
        isValid = False
        print('\nERROR: Branch ({}) and commit ({}) references do not match.'.format(
            branchRef,
            jiraIdReg
        ))

    return (isValid, messageOverride)


def main():
    messageFile = sys.argv[1]
    try:
        file = open(messageFile, 'r')
        message = file.read()
    finally:
        file.close()

    isValid, messageOverride = isCommitValid(message)

    if messageOverride:
        try:
            file = open(messageFile, 'w')
            message = file.write(messageOverride)
        except:
            isValid = False
        finally:
            file.close()

    sys.exit(0 if isValid else 1)


if __name__ == "__main__":
    main()
